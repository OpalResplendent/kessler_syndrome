
enum NUMBER_JUSTIFICATION {NJ_LEFT = -1, NJ_MIDDLE = 0, NJ_RIGHT = 1};

					//0     1      2      3     4      5
v2 NUMBER_MAP[6] = {{0,0},{1,0},{1,0.5},{1,1},{0,1},{0,0.5}};

void
rendernumber(long long number, float x, float y, float size, NUMBER_JUSTIFICATION justification)
{
	v2 position = {x,y};
	
	std::string numberstring = to_string(number);
	size_t characters = numberstring.length();

	switch(justification)
	{
		case NJ_LEFT:
		{

		} break;
		case NJ_RIGHT:
		{
			position.x -= size * characters * 1.2f;
		} break;
		case NJ_MIDDLE:
		{
			position.x -= (size * characters * 1.2f) / 2;
		} break;
		default:
		{

		} break;
	}

	for(size_t ii = 0; ii < characters; ++ii)
	{
		switch(numberstring[ii]-0x30)
		{
			case 0:
			{
				DrawLine(position + size * NUMBER_MAP[0], position + size * NUMBER_MAP[1]);
				DrawLine(position + size * NUMBER_MAP[1], position + size * NUMBER_MAP[3]);
				DrawLine(position + size * NUMBER_MAP[3], position + size * NUMBER_MAP[4]);
				DrawLine(position + size * NUMBER_MAP[4], position + size * NUMBER_MAP[0]);
			} break;
			
			case 1:
			{
				position.x -= size/2.0f;
				DrawLine(position + size * NUMBER_MAP[1], position + size * NUMBER_MAP[3]);
				position.x += size/2.0f;
			} break;
			
			case 2:
			{
				DrawLine(position + size * NUMBER_MAP[0], position + size * NUMBER_MAP[1]);
				DrawLine(position + size * NUMBER_MAP[1], position + size * NUMBER_MAP[2]);
				DrawLine(position + size * NUMBER_MAP[2], position + size * NUMBER_MAP[5]);
				DrawLine(position + size * NUMBER_MAP[5], position + size * NUMBER_MAP[4]);
				DrawLine(position + size * NUMBER_MAP[4], position + size * NUMBER_MAP[3]);
			} break;
			
			case 3:
			{
				DrawLine(position + size * NUMBER_MAP[0], position + size * NUMBER_MAP[1]);
				DrawLine(position + size * NUMBER_MAP[1], position + size * NUMBER_MAP[3]);
				DrawLine(position + size * NUMBER_MAP[5], position + size * NUMBER_MAP[2]);
				DrawLine(position + size * NUMBER_MAP[4], position + size * NUMBER_MAP[3]);
			} break;
			
			case 4:
			{
				DrawLine(position + size * NUMBER_MAP[0], position + size * NUMBER_MAP[5]);
				DrawLine(position + size * NUMBER_MAP[5], position + size * NUMBER_MAP[2]);
				DrawLine(position + size * NUMBER_MAP[1], position + size * NUMBER_MAP[3]);
			} break;
			
			case 5:
			{
				DrawLine(position + size * NUMBER_MAP[0], position + size * NUMBER_MAP[1]);
				DrawLine(position + size * NUMBER_MAP[0], position + size * NUMBER_MAP[5]);
				DrawLine(position + size * NUMBER_MAP[2], position + size * NUMBER_MAP[5]);
				DrawLine(position + size * NUMBER_MAP[2], position + size * NUMBER_MAP[3]);
				DrawLine(position + size * NUMBER_MAP[4], position + size * NUMBER_MAP[3]);
			} break;
			
			case 6:
			{
				DrawLine(position + size * NUMBER_MAP[0], position + size * NUMBER_MAP[4]);
				DrawLine(position + size * NUMBER_MAP[2], position + size * NUMBER_MAP[5]);
				DrawLine(position + size * NUMBER_MAP[2], position + size * NUMBER_MAP[3]);
				DrawLine(position + size * NUMBER_MAP[4], position + size * NUMBER_MAP[3]);
			} break;
			
			case 7:
			{
				DrawLine(position + size * NUMBER_MAP[1], position + size * NUMBER_MAP[0]);
				DrawLine(position + size * NUMBER_MAP[1], position + size * NUMBER_MAP[3]);
			} break;
			
			case 8:
			{
				DrawLine(position + size * NUMBER_MAP[0], position + size * NUMBER_MAP[1]);
				DrawLine(position + size * NUMBER_MAP[3], position + size * NUMBER_MAP[1]);
				DrawLine(position + size * NUMBER_MAP[5], position + size * NUMBER_MAP[2]);
				DrawLine(position + size * NUMBER_MAP[3], position + size * NUMBER_MAP[4]);
				DrawLine(position + size * NUMBER_MAP[0], position + size * NUMBER_MAP[4]);
			} break;
			
			case 9:
			{
				DrawLine(position + size * NUMBER_MAP[1], position + size * NUMBER_MAP[0]);
				DrawLine(position + size * NUMBER_MAP[1], position + size * NUMBER_MAP[3]);
				DrawLine(position + size * NUMBER_MAP[5], position + size * NUMBER_MAP[2]);
				DrawLine(position + size * NUMBER_MAP[5], position + size * NUMBER_MAP[0]);
			} break;
			
			default:
			{

			} break;
		}
		position.x += size * 1.2f;
	}
}
